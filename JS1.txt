'use strict';

// Data needed for a later exercise
// const flights =
//   '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

// Data needed for first part of the section
const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],
  openingHours: {
    thu: {
      open: 12,
      close: 13,
    },
    fri: {
      open: 23,
      close: 24,
    },
    sat: {
      open: 45,
      close: 46,
    },
  },

  order: function (starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },
  orderDelivery: function ({ starterIndex, time, mainIndex, address }) {
    console.log(time);
    console.log(mainIndex);
    console.log(address);
    console.log(starterIndex);
  },

  orderPasta: function (ing1, ing2, ing3) {
    console.log(`here is your pasta with ${ing1},${ing2},${ing3}`);
  },
};


//!!105 Spread operators
// expands an array , unpacking an array

//todoSpread (example - 6)

// ordering pasta with live examples
// const ing = ['idli', 'vaada', 'dosa'];
// restaurant.orderPasta(...ing);

//todoSpread (example-5)
// spread works on all iterables like arrays , string , sets , maps but not objects

// const name = 'sagar';
// const newName = [...name, ' ', 's'];
// console.log(newName);

//todoSpread (example-4)
//shallow copy
// const mainMenuCopy = [...restaurant.mainMenu];
// console.log(mainMenuCopy);
///////////////////////////
// join  2 array
// const menu = [...restaurant.mainMenu, ...restaurant.starterMenu];
// console.log(menu);

//todoSpread (example -3)
//live example
// expanding first array and adding next
// const newItems = [...restaurant.mainMenu, 'idli', 'vada'];
// console.log(newItems);

//todoSpread (example -2)
// when passing multiple arguments into function

// function sgaar(news) {
//   console.log(news);
// }

// const analogy = [1, 2, 3, 45, 5];
// sgaar([...analogy]);

//todoSpread (example - 1)
// const arr = [7, 8, 9];
// const bad = [...arr];
// console.log(bad);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//!!104 Destructring Objects
// we use curly brackets , provide varibale names that exactly object names

// todoObject (example - 6)
// Live example
// restaurant.orderDelivery({
//   time: '22:30',
//   address: 'Via del Sole, 21',
//   mainIndex: 2,
//   starterIndex: 2,
// });

// todoObject (examplke- 5)
//nested objects

// const {
//   sat: { open: opening, close: closing },
// } = restaurant.openingHours;
// console.log(opening, closing);

//todoObject (example - 4)
// mutating variables in objects
// let a = 111;
// let b = 999;

// let newS = { a: 23, b: 34 };
//!! use () in objects while destructring
// ({ a, b } = newS);
// console.log(a, b);

//todoObject(examle-3)
// when we deal with api calls like setting default values
//!!! Object default setting
// const { menu = [], starterMenu: starters = [] } = restaurant;
// console.log(menu, starters);
//!Array deafult setting
// const sagar = [1, 2, 3];
// const [p = 0, q = 0, z = 0, u = 0] = sagar;
// console.log(p, q, z, u);

//todoObject (example-2)

// const { name: restaurantName, openingHours: open } = restaurant;
// console.log(restaurantName, open);

//todoObject (example-1)
// used for live data fetchin
// const { name, openingHours } = restaurant;
// console.log(name, openingHours);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 103 Destructring Arrays.
// unpacking values into seperate varibales

//todo (example-3)
// nested
// const nested = [1, 2, [3, 4]];
// const [a, b, [c, d]] = nested;
// console.log(a, b, c, d);

//toDO(EXAMPLE -2)

// let orders = restaurant.order(2, 0);
// console.log(orders);

//TODO (example -1)
// This is how i can swap (You know what i am sayin)
// let [first, second] = restaurant.categories;
// [second, first] = [first, second];
// console.log(first, second);
//TODO(OR)
// const [newFirst, newSecond] = [second, first];
// console.log(newFirst, newSecond);
//todo(OR)
// const [a, b, c, d] = [2, 3, 4, 5];
// console.log(a, b, c, d);
